name: Test the PR
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and test with Node.js ${{ matrix.node-version }} and ${{ matrix.db }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20] # See supported Node.js release schedule at https://nodejs.org/en/about/releases
        db: [postgresql, mysql, mongodb, sqlite]

    env:
      DB_PROVIDER: ${{ matrix.db }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install modules
        run: pnpm install

      - name: Check code formatting
        run: pnpm run lint

      - name: Generate Prisma Client
        run: pnpm run prisma:gen

      - name: Build
        run: pnpm run build

      - name: Run unit tests
        run: pnpm run test

  docker-image-smoke:
    name: Docker image smoke test (${{ matrix.db }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        db: [postgresql, mongodb, sqlite]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup network (non-sqlite)
        if: matrix.db != 'sqlite'
        run: docker network create integration

      - name: Start PostgreSQL
        if: matrix.db == 'postgresql'
        run: |
          PW=$(openssl rand -hex 16)
          echo "POSTGRES_PASSWORD=$PW" >> $GITHUB_ENV
          docker run -d --name db --network integration \
            -e POSTGRES_USER=test \
            -e POSTGRES_PASSWORD=$PW \
            -e POSTGRES_DB=test \
            postgres:14
          for i in {1..30}; do \
            docker run --rm --network integration postgres:14 pg_isready -h db -U test && break; \
            sleep 2; \
          done

      - name: Start MongoDB
        if: matrix.db == 'mongodb'
        run: |
          MPW=$(openssl rand -hex 16)
          echo "MONGO_ROOT_PASSWORD=$MPW" >> $GITHUB_ENV
          docker run -d --name db --network integration \
            -e MONGO_INITDB_ROOT_USERNAME=root \
            -e MONGO_INITDB_ROOT_PASSWORD=$MPW \
            -p 27017:27017 \
            mongo:7
          # Wait for readiness
          for i in {1..40}; do \
            docker run --rm --network integration mongo:7 mongosh "mongodb://root:$MPW@db:27017/admin" --eval "db.runCommand({ ping: 1 })" && break; \
            sleep 2; \
          done

      - name: Set DB environment variables
        run: |
          if [ "${{ matrix.db }}" = "postgresql" ]; then
            echo "DB_PROVIDER=postgresql" >> $GITHUB_ENV
            echo "DB_URL=postgresql://test:$POSTGRES_PASSWORD@db:5432/test" >> $GITHUB_ENV
          elif [ "${{ matrix.db }}" = "mongodb" ]; then
            echo "DB_PROVIDER=mongodb" >> $GITHUB_ENV
            echo "DB_URL=mongodb://root:$MONGO_ROOT_PASSWORD@db:27017/test?authSource=admin" >> $GITHUB_ENV
          else
            echo "DB_PROVIDER=sqlite" >> $GITHUB_ENV
            echo "DB_URL=file:./dev.db" >> $GITHUB_ENV
          fi

      - name: Build docker image
        run: docker build --build-arg DB_PROVIDER=$DB_PROVIDER -t idn-area:${{ github.sha }} .

      - name: Run migration & seed
        run: |
          if [ "${{ matrix.db }}" = "sqlite" ]; then
            NET_ARGS=""
          else
            NET_ARGS="--network integration"
          fi
          docker run --rm $NET_ARGS \
            -e DB_PROVIDER=$DB_PROVIDER \
            -e DB_URL="$DB_URL" \
            idn-area:${{ github.sha }} pnpm run db:migrate
          docker run --rm $NET_ARGS \
            -e DB_PROVIDER=$DB_PROVIDER \
            -e DB_URL="$DB_URL" \
            idn-area:${{ github.sha }} pnpm run db:seed || true

      - name: Start app container
        run: |
          if [ "${{ matrix.db }}" = "sqlite" ]; then
            NET_ARGS=""
          else
            NET_ARGS="--network integration"
          fi
          docker run -d --name app $NET_ARGS \
            -e DB_PROVIDER=$DB_PROVIDER \
            -e DB_URL="$DB_URL" \
            -p 3000:3000 \
            idn-area:${{ github.sha }}
          for i in {1..40}; do
            if curl -fsS http://localhost:3000/health > /dev/null; then echo "App is up"; break; fi; sleep 2; done

      - name: Smoke test /health endpoint
        run: |
          curl -v http://localhost:3000/health | tee /tmp/health.json
          grep 'OK' /tmp/health.json

      - name: Show logs on failure
        if: failure()
        run: |
          docker logs app || true
          docker ps -a || true
          docker logs db || true

      - name: Cleanup
        if: always()
        run: |
          docker rm -f app || true
          docker rm -f db || true
          docker network rm integration || true
          docker images | grep idn-area | awk '{print $3}' | xargs -r docker rmi -f
